import pandas as pd
import numpy as np
import os
import gzip
from functools import reduce
import scipy.stats as st
import statsmodels.stats.multitest as multi

cohort_nms= ['harvestm12', 'harvestm24','rotterdam1', 'rotterdam2', 'normentfeb', 'normentmay']
smpl_nms= ['maternal','paternal', 'fetal']
batch_nms= ['m12', 'm24']
CHR_nms= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22]

# Other arguments:

pruning_nms= ['none', 'soft', 'moderate', 'hard']

dens_nms= [5]
SNP_nms= [15, 25, 50, 75, 100, 150, 200, 350, 500]
length_nms= [0.0000001]
het_nms= [0, 1]
GAP_nms= [5]

dens_bp= [5000]
SNP_bp= [15, 25, 50, 75, 100, 150, 200, 350, 500]
length_bp= [0.0000001]
het_bp= [0, 1]
GAP_bp= [5000]

# Functions

def isfloat(str):
    try:
        float(str)
        return True
    except ValueError:
        return False


rule extract_HC:
	'List of variants for extracting genotype.'
	input:
		'/mnt/work/pol/ROH/results/HC_{sample}_cox_spont'
	output:
		'/mnt/work/pol/ROH/results/misc/HC_toextract_{sample}'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		if d.shape[0]== 0:
			open(output[0], 'a').close()
		if d.shape[0]> 0:
			d[['chr', 'cM1', 'cM2']]= d['segment'].str.split(':',expand=True)
			d['chr']= d.chr.astype(float)
			d= d[['chr', 'pos1', 'pos2']]
			d= d.applymap(np.int64)
			d['chr']= d.chr.astype(str)
			d['chr']= np.where(d.chr== '23', 'X', d.chr)
			d.sort_values(['chr', 'pos1'], inplace= True)
			d.to_csv(output[0], sep= '\t', index= False, header= False)

rule extract_vcf_samples:
        'Extract samples id included in the VCF file, for each batch.'
        input:
                '/mnt/archive/HARVEST/delivery-fhi/data/imputed/imputed_m12/1.vcf.gz',
                '/mnt/archive/HARVEST/delivery-fhi/data/imputed/imputed_m24/1.vcf.gz',
                '/mnt/archive/ROTTERDAM1/delivery-fhi/data/imputed/1.vcf.gz',
                '/mnt/archive/ROTTERDAM2/delivery-fhi/data/imputed/1.vcf.gz',
                '/mnt/archive/NORMENT1/delivery-fhi/data/imputed/feb18/1.vcf.gz',
                '/mnt/archive/NORMENT1/delivery-fhi/data/imputed/may16/1.vcf.gz'
        output:
                temp('/mnt/work/pol/ROH/{cohort}/genotypes/vcf_ids')
        run:
                if 'harvestm12' == wildcards.cohort: vcf= input[0]
                if 'harvestm24' == wildcards.cohort: vcf= input[1]
                if 'rotterdam1' == wildcards.cohort: vcf= input[2]
                if 'rotterdam2' == wildcards.cohort: vcf= input[3]
                if 'normentfeb' == wildcards.cohort: vcf= input[4]
                if 'normentmay' == wildcards.cohort: vcf= input[5]
                shell("set +o pipefail; zgrep -v '##' {vcf} | head -1 | cut -f10- | sed 's/\\t/\\n/g'  > {output[0]} ")

rule extract_samples:
        'Samples for filtering VCF files.'
        input:
                '/mnt/work/pol/{cohort}/pheno/{cohort}_linkage.csv',
                '/mnt/work/pol/ROH/{cohort}/genotypes/vcf_ids'
        output:
                '/mnt/work/pol/ROH/{cohort}/genotypes/{sample}_ids_toextract'
        run:
                if 'harvest' in wildcards.cohort:
                        d= pd.read_csv(input[0], delim_whitespace= True, header= 0)
                        Sentrix= 'SentrixID_1'
                if 'harvest' not in wildcards.cohort:
                        d= pd.read_csv(input[0], delim_whitespace= True, header= 0)
                        Sentrix= 'SentrixID'
                if 'maternal' in wildcards.sample:
                        d= d.loc[d.Role=='Mother', :]
                if 'paternal' in wildcards.sample:
                        d= d.loc[d.Role=='Father', :]
                if 'fetal' in wildcards.sample:
                        d= d.loc[d.Role=='Child', :]
                x= [line.strip() for line in open(input[1], 'r')]
                d= d.loc[d[Sentrix].isin(x)]
                d.drop_duplicates(subset= [Sentrix], inplace= True)
                d.to_csv(output[0], header= False, columns= [Sentrix], index= False, sep= '\t')

rule extract_GT:
        'Extract genotype for HC segments.'
        input:
                '/mnt/work/pol/ROH/results/misc/HC_toextract_{sample}',
                '/mnt/work/pol/ROH/{cohort}/genotypes/{sample}_ids_toextract',
                '/mnt/archive/HARVEST/delivery-fhi/data/imputed/imputed_m12/{CHR}.vcf.gz',
                '/mnt/archive/HARVEST/delivery-fhi/data/imputed/imputed_m24/{CHR}.vcf.gz',
                '/mnt/archive/ROTTERDAM1/delivery-fhi/data/imputed/{CHR}.vcf.gz',
                '/mnt/archive/ROTTERDAM2/delivery-fhi/data/imputed/{CHR}.vcf.gz',
                '/mnt/archive/NORMENT1/delivery-fhi/data/imputed/feb18/{CHR}.vcf.gz',
                '/mnt/archive/NORMENT1/delivery-fhi/data/imputed/may16/{CHR}.vcf.gz'
        output:
                temp('/mnt/work/pol/ROH/{cohort}/genotypes/GT/{sample}_gt{CHR}_HC')
        run:
                if 'harvestm12' in wildcards.cohort: vcf= input[2]
                if 'harvestm24' in wildcards.cohort: vcf= input[3]
                if 'rotterdam1' in wildcards.cohort: vcf= input[4]
                if 'rotterdam2' in wildcards.cohort: vcf= input[5]
                if 'normentfeb' in wildcards.cohort: vcf= input[6]
                if 'normentmay' in wildcards.cohort: vcf= input[7]
		if os.stat(input[0]).st_size > 0: shell("~/soft/bcftools-1.9/bin/bcftools query -S {input[1]} -R {input[0]} -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' {vcf} -o {output[0]}")
		if os.stat(input[0]).st_size == 0: open(output[0], 'a').close()

rule concat_GT:
        'Concat GT form all chromosomes.'
        input:
                expand('/mnt/work/pol/ROH/{{cohort}}/genotypes/GT/{{sample}}_gt{CHR}_HC', CHR= CHR_nms)
        output:
                temp('/mnt/work/pol/ROH/{cohort}/genotypes/GT/{sample}_HC_temp')
        shell:
                'cat {input} > {output[0]}'

