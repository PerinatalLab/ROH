import csv
import pandas as pd
import sys
import numpy as np
import os
import gzip
from functools import reduce
import scipy.stats as st
import statsmodels.stats.multitest as multi

cohort_nms= ['harvestm12', 'harvestm24','rotterdam1', 'rotterdam2', 'normentfeb', 'normentmay']
smpl_nms= ['maternal','paternal', 'fetal']
batch_nms= ['m12', 'm24']
CHR_nms= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22]

# Other arguments:

pruning_nms= ['none', 'soft', 'moderate']

dens_nms= [5]
SNP_nms= [15, 25, 50, 75, 100, 150, 200, 300, 400]
length_nms= [0.0000001]
het_nms= [0, 1]
GAP_nms= [5]

dens_bp= [5000]
SNP_bp= [15, 25, 50, 75, 100, 150, 200, 300, 400]
length_bp= [0.0000001]
het_bp= [0, 1]
GAP_bp= [5000]

GTEx_tissue_nms= ['Adipose_Subcutaneous', 'Adipose_Visceral_Omentum', 'Adrenal_Gland', 'Artery_Aorta', 'Artery_Coronary', 'Artery_Tibial', 'Brain_Amygdala', 'Brain_Anterior_cingulate_cortex_BA24', 'Brain_Caudate_basal_ganglia', 'Brain_Cerebellar_Hemisphere', 'Brain_Cerebellum', 'Brain_Cortex', 'Brain_Frontal_Cortex_BA9', 'Brain_Hippocampus', 'Brain_Hypothalamus', 'Brain_Nucleus_accumbens_basal_ganglia', 'Brain_Putamen_basal_ganglia', 'Brain_Spinal_cord_cervical_c-1', 'Brain_Substantia_nigra', 'Breast_Mammary_Tissue', 'Cells_Cultured_fibroblasts', 'Cells_EBV-transformed_lymphocytes', 'Colon_Sigmoid', 'Colon_Transverse', 'Esophagus_Gastroesophageal_Junction', 'Esophagus_Mucosa', 'Esophagus_Muscularis', 'Heart_Atrial_Appendage', 'Heart_Left_Ventricle', 'Kidney_Cortex', 'Liver', 'Lung', 'Minor_Salivary_Gland', 'Muscle_Skeletal', 'Nerve_Tibial', 'Ovary', 'Pancreas', 'Pituitary', 'Prostate', 'Skin_Not_Sun_Exposed_Suprapubic', 'Skin_Sun_Exposed_Lower_leg', 'Small_Intestine_Terminal_Ileum', 'Spleen', 'Stomach', 'Testis', 'Thyroid', 'Uterus', 'Vagina', 'Whole_Blood']

# Functions

def isfloat(str):
    try:
        float(str)
        return True
    except ValueError:
        return False

def getOverlap(start0, end0, start1, end1):
	return (np.maximum(0, np.minimum(end0, end1) - np.maximum(start0, start1))) / (np.array(end0) - np.array(start0) )

def absOverlap(start0, end0, start1, end1):
	return (np.maximum(0, np.minimum(end0, end1) - np.maximum(start0, start1)))

def row_filter(row):
	gene= row['RSID'].split(',')[1]
	chr= row['RSID'].split(',')[0].split('_')[0].replace('chr', '').replace('X', '23')
	pos= row['RSID'].split(',')[0].split('_')[1]
	beta= row['BETA_FE']
	with open(outfile, 'a') as f:
		f.write("%s\t%s\t%s\t%s\t%s\n" % (chr, int(pos) - 1, pos, gene, beta))

rule format_gene_map:
	'Format gene map from UCSC.'
	input:
		'/mnt/work/pol/refdata/UCSC_gene_tx.txt',
		'/mnt/work/pol/refdata/Pseudogenes_UCSC.txt'
	output:
		'/mnt/work/pol/ROH/annotation/UCSC_gene_transcription.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		x= pd.read_csv(input[1], sep= '\t', header= 0)
		d= d.loc[~d.geneSymbol.isin(x.name2), :]
		d['chrom']= d.chrom.replace(' ', '', regex= True)
		d['chrom']= d.chrom.replace('chr', '', regex= True)
		d['chrom']= d.chrom.replace('X', '23', regex= True)
		d['chrom']= pd.to_numeric(d.chrom, errors= 'coerce')
		d= d.loc[~d.EntrezID.isnull(), :]
		d= d.loc[d.cdsStart != d.cdsEnd,:]
		d.dropna(subset= ['chrom'], inplace= True)
		x= d.groupby(['chrom', 'geneSymbol', 'EntrezID'])['txStart'].min().reset_index()
		x1= d.groupby(['chrom', 'geneSymbol', 'EntrezID'])['txEnd'].max().reset_index()
		df= pd.merge(x, x1, on= ['chrom', 'geneSymbol', 'EntrezID'])
		df.columns= ['chr', 'gene', 'EntrezID', 'start', 'end']
		df= df.loc[df.start != df.end, :]
		df.to_csv(output[0], sep= '\t', header= True, index= False)

rule gene_map_bp_to_cM:
	''
	input:
		'/mnt/work/pol/ROH/annotation/UCSC_gene_transcription.txt',
		'/mnt/work/pol/ROH/1KG/1000GP_Phase3/genetic_map_combined_b37.txt',
		'/mnt/work/pol/ROH/1KG/1000GP_Phase3/chrX/genetic_map_chrX_nonPAR_combined_b37.txt'
	output:
		'/mnt/work/pol/ROH/annotation/cM_gene_transcription.txt'
	run:
		d= pd.read_csv(input[0], delim_whitespace=True, header= 0)
		gm= pd.read_csv(input[1], delim_whitespace=True, header= 0, names= ['chr', 'pos', 'rate', 'cM'])
		gx= pd.read_csv(input[2], delim_whitespace=True, header= 0, names= ['pos', 'rate', 'cM'])
		gx['chr']= 23
		gm= pd.concat([gm,gx])
		df_list= list()
		for CHR in set(d.chr):
			temp_d= d.loc[d.chr== CHR, :]
			temp_gm= gm.loc[gm.chr== CHR, :]
			temp_d['cM1']= np.interp(temp_d.start, temp_gm['pos'], temp_gm['cM'])
			temp_d['cM2']= np.interp(temp_d.end, temp_gm['pos'], temp_gm['cM'])
			df_list.append(temp_d)
		x= pd.concat(df_list)
		x.to_csv(output[0], sep= '\t', header= True, index= False)

rule map_genes_segments:
	'Map genes to segments.'
	input:
		'/mnt/work/pol/ROH/results/surv_spont_{sample}',
		'/mnt/work/pol/ROH/annotation/UCSC_gene_transcription.txt'
	output:
		'/mnt/work/pol/ROH/annotation/genes_segments_{sample}.txt'
	run:
		df= pd.read_csv(input[0], header= 0, sep= '\t')
		if df.shape[0] == 0:
                        open(output[0], 'a').close()
		else:
			df[['chr', 'cM1', 'cM2']]= df.segment.str.split(':', expand= True)
			df[['chr', 'cM1', 'cM2']]= df[['chr', 'cM1', 'cM2']].apply(lambda x: x.astype('float'))
			gene= pd.read_csv(input[1], sep= '\t', header= 0)
			gene['chr']= pd.to_numeric(gene.chr, errors= 'coerce')
			gene.dropna(subset= ['chr'], axis= 0, inplace= True)
			df_HC= df.drop_duplicates('segment')
			x= df_HC.merge(gene, on= 'chr', how= 'left')
			x['overlap']= getOverlap(x.pos1, x.pos2, x.start, x.end)
			x= x.loc[x.overlap>0, ['segment', 'gene', 'EntrezID', 'n','freq', 'beta', 'sd', 'pvalue', 'loglik', 'pos1', 'pos2']]
			df_HC= df_HC.loc[~df_HC.segment.isin(x.segment), :]
			df_HC= df_HC.merge(gene, on= 'chr')
			df_HC['overlap']= getOverlap(df_HC.pos1, df_HC.pos2, df_HC.start, df_HC.end)
			df_HC['bp_diff']= np.where((df_HC.pos1 - df_HC.end) > 0, df_HC.pos1 - df_HC.end, df_HC.start - df_HC.pos2)
			df_HC['min_bp']= df_HC['bp_diff'].groupby(df_HC['segment']).transform('min')
			df_HC= df_HC.loc[df_HC.bp_diff== df_HC.min_bp,:]
			df_HC= df_HC[['segment', 'gene', 'EntrezID', 'n', 'freq', 'beta', 'sd', 'pvalue', 'loglik', 'pos1', 'pos2']]
			x= pd.concat([df_HC, x])
			x.to_csv(output[0], sep= '\t', header= True, index= False)

rule HC_to_OMIM:
	'Only using recessive diseases.'
	input:
		'/mnt/work/pol/ROH/annotation/genes_segments_{sample}.txt',
		'/mnt/work/pol/refdata/OMIM/hg19/genemap2_hg19.txt'
	output:
		'/mnt/work/pol/ROH/annotation/OMIM_{sample}.txt'
	run:
		if os.stat(input[0]).st_size == 0:
                        open(output[0], 'a').close()
		else:
			d= pd.read_csv(input[0], sep= '\t', header= 0)
			df= pd.read_csv(input[1], sep= '\t', header= 0)
			df['chr']= pd.to_numeric(df.chr.str.replace('chr', ''), errors= 'coerce')
			df.dropna(subset= ['chr'], inplace= True)
			df= df[['cyto', 'Mim', 'GeneSymbol', 'EntrezID', 'Phenotype', 'Comments']]
			df.dropna(subset= ['Phenotype'], inplace= True)
			rec= df[df.Phenotype.str.contains('recessive', na= False)]
			d= pd.merge(d, rec, on= 'EntrezID', how= 'left')
			d.to_csv(output[0], header= True, index= False, sep= '\t')

rule select_independent_HC:
	''
	input:
		'/mnt/work/pol/ROH/annotation/OMIM_{sample}.txt',
		'/mnt/work/pol/ROH/results/{sample}/eff_ROH.txt'
	output:
		'/mnt/work/pol/ROH/annotation/independent_OMIM_HC_{sample}.txt'
	run:
		if os.stat(input[0]).st_size == 0:
			open(output[0], 'a').close()
		else:
			with open(input[1]) as f:
				eff= sum([int(line.strip()) for line in f])
			df= pd.read_csv(input[0], sep= '\t', header= 0)
#			eff= df.drop_duplicates(subset= ['segment']).shape[0]
			df= df.loc[df.pvalue< (0.05 / eff), :]
			if df.shape[0]== 0:
				open(output[0], 'a').close()
			else:
				df[['chr', 'cM1', 'cM2']]= df.segment.str.split(':', expand= True)
		                df[['chr', 'cM1', 'cM2']]= df[['chr', 'cM1', 'cM2']].apply(lambda x: x.astype('float'))
				df['cMm']= ((df['cM1'] + df['cM2']) / 2 ) / (100 * 10**4)
				df.sort_values(by= ['chr', 'cMm'], inplace= True)
				df['cMdif']= df.cMm - df.groupby('chr')['cMm'].shift(1)
				df['cMdif']= (df['cMdif']>0.5)*1
				df['clump']= df.groupby('chr')['cMdif'].cumsum()
				df.sort_values(by= ['pvalue'], inplace= True)
				df['min_pvalue']= df.groupby(['chr','clump'])['pvalue'].transform('min')
				df= df.loc[df.pvalue== df.min_pvalue, :]
				df= df[['segment', 'n', 'freq', 'beta', 'sd', 'pvalue', 'pos1', 'pos2', 'gene', 'EntrezID', 'cyto', 'Mim']]
				df.to_csv(output[0], sep= '\t', index= False, header= True)

rule annotate_imputed:
	'Map imputed variants to genes.'
	input:
		'/mnt/work/pol/ROH/results/imputed/surv_imputed_{sample}.txt',
		'/mnt/work/pol/ROH/annotation/UCSC_gene_transcription.txt',
		'/mnt/work/pol/refdata/OMIM/hg19/genemap2_hg19.txt'
	output:
		'/mnt/work/pol/ROH/annotation/genes_imputed_{sample}.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= None, names= ['variant', 'REF', 'EFF', 'model', 'n', 'het', 'hom', 'beta', 'sd', 'pvalue'] )
		if d.shape[0] == 0:
                        open(output[0], 'a').close()
		else:
			d= d.loc[d.model== 'recessive', :]
                        d[['chr', 'pos', 'ref', 'eff']]= d.variant.str.split(':', expand= True)
                        d[['chr', 'pos']]= d[['chr', 'pos']].apply(lambda x: x.astype('float'))
                        gene= pd.read_csv(input[1], sep= '\t', header= 0)
			gene['chr']= pd.to_numeric(gene.chr, errors= 'coerce')
			gene.dropna(subset= ['chr'], axis= 0, inplace= True)
			d.dropna(subset= ['pvalue'], axis= 0, inplace= True)
			d.sort_values(by= ['pvalue'], inplace= True)
			x= pd.merge(d, gene, on= 'chr', how= 'left')
			x1= x.loc[(x.pos>= x.start) & (x.pos<= x.end), :]
			x= x.loc[~x.variant.isin(x1.variant), :]
			x['bp_diff']= np.where(abs(x.pos - x.start) < abs(x.pos - x.end), abs(x.start - x.pos), abs(x.end - x.pos))
			x['min_bp']= x['bp_diff'].groupby(x['variant']).transform('min')
                        x= x.sort_values('min_bp').groupby('variant').head(1)
			x= x[['chr', 'pos', 'REF', 'EFF', 'gene', 'EntrezID']]
			x1= x1[['chr', 'pos', 'REF', 'EFF', 'gene', 'EntrezID']]
			x= pd.concat([x, x1])
			omim= pd.read_csv(input[2], sep= '\t', header= 0)
                        omim['chr']= pd.to_numeric(omim.chr.str.replace('chr', ''), errors= 'coerce')
                        omim.dropna(subset= ['chr'], inplace= True)
                        omim= omim[['cyto', 'Mim', 'GeneSymbol', 'EntrezID', 'Phenotype', 'Comments']]
                        omim.dropna(subset= ['Phenotype'], inplace= True)
                        rec= omim[omim.Phenotype.str.contains('recessive', na= False)]
			x= pd.merge(x, rec, on= 'EntrezID', how= 'left')
			d= pd.merge(d, x, on= ['chr', 'pos', 'REF', 'EFF'], how= 'left')
			d= d[['chr', 'pos', 'REF', 'EFF', 'n', 'het', 'hom', 'beta', 'sd', 'pvalue', 'gene', 'EntrezID', 'Mim']]
			d.to_csv(output[0], sep= '\t', header= True, index= False)

rule download_GNOMAD:
	'Download GNOMAD genomes.'
	output:
		temp('/mnt/work/pol/ROH/annotation/GNOMAD/geno/gnomad.genomes.r2.1.1.sites.{CHR}.vcf.gz'),
		temp('/mnt/work/pol/ROH/annotation/GNOMAD/geno/gnomad.genomes.r2.1.1.sites.{CHR}.vcf.gz.tbi')
	params:
		'https://storage.googleapis.com/gnomad-public/release/2.1.1/vcf/genomes/gnomad.genomes.r2.1.1.sites.{CHR}.vcf.bgz',
		'https://storage.googleapis.com/gnomad-public/release/2.1.1/vcf/genomes/gnomad.genomes.r2.1.1.sites.{CHR}.vcf.bgz.tbi'
	shell:
		'''
		wget -O {output[0]} {params[0]}
		wget -O {output[1]} {params[1]}
		'''

rule extract_GNOMAD:
        'Use tabix to filter GNOMAD'
        input:
                '/mnt/work/pol/ROH/annotation/GNOMAD/geno/gnomad.genomes.r2.1.1.sites.{CHR}.vcf.gz',
		'/mnt/work/pol/ROH/results/misc/HC_toextract_{sample}',
                '/mnt/work/pol/ROH/annotation/GNOMAD/geno/gnomad.genomes.r2.1.1.sites.{CHR}.vcf.gz.tbi'
        output:
		'/mnt/work/pol/ROH/annotation/GNOMAD/geno/filtered_{CHR}_HC_{sample}'
	run:
                if wildcards.sample== 'paternal': open(output[0], 'a').close()
		if wildcards.sample!= 'paternal': shell("tabix -R {input[1]} {input[0]} > {output[0]}")


rule count_missense:
	''
	input:
		'/mnt/work/pol/ROH/annotation/GNOMAD/geno/filtered_{CHR}_HC_{sample}',
		'/mnt/work/pol/ROH/results/HC_{sample}_surv_spont'
	output:
		temp('/mnt/work/pol/ROH/annotation/GNOMAD/chr{CHR}_HC_{sample}.txt')
	run:
		d= pd.read_csv(input[0], sep= '\t', header= None, names= ['chr', 'pos', 'X1', 'X2', 'X3', 'X4', 'X5', 'VEP'])
		if d.shape[0]== 0:
                        open(output[0], 'a').close()
		if d.shape[0]> 0:
			d= d[['chr', 'pos', 'VEP']]
			df= pd.read_csv(input[1], sep= '\t', header= 0)
			df[['chr', 'cM1', 'cM2']]= df.segment.str.split(':', expand= True)
			df['chr']= df['chr'].astype('float')
			d= pd.merge(df, d, on= ['chr'])
			d= d.loc[(d.pos1<= d.pos) & (d.pos2>= d.pos), :]
			d_counts= d.groupby('segment').size().reset_index(name='counts')
			high= ['stop_lost', 'stop_gained', 'start_lost', 'frameshift', 'splice_donor', 'splice_acceptor', 'transcript_ablation', 'transcript_amplification' ]
			moderate= ['inframe_deletion', 'inframe_insertion', 'missense_variant', 'protein_altering_variant', 'regulatory_region_ablation']
			d_m= d[d.VEP.str.contains('|'.join(moderate))]
			d_h= d[d.VEP.str.contains('|'.join(high))]
			dm_counts= d_m.groupby('segment').size().reset_index(name='moderate')
			dh_counts= d_h.groupby('segment').size().reset_index(name='high')
			x= pd.merge(d_counts, dm_counts, on= 'segment', how= 'outer')
			x= pd.merge(x, dh_counts, on= 'segment', how= 'outer')
			x.fillna(0, inplace= True)
			x.to_csv(output[0], sep= '\t', header= False, index= False)

rule concat_VEP:
	''
	input:
		expand('/mnt/work/pol/ROH/annotation/GNOMAD/chr{CHR}_HC_{{sample}}.txt', CHR= CHR_nms)
	output:
		'/mnt/work/pol/ROH/annotation/GNOMAD/HC_{sample}_VEP.txt'
	shell:
		'cat {input} > {output[0]}'

rule annotate_gene_burden:
	''
	input:
		'/mnt/work/pol/ROH/annotation/UCSC_gene_transcription.txt',
		'/mnt/work/pol/ROH/results/burden_survival_{sample}.txt',
		'/mnt/work/pol/refdata/OMIM/hg19/genemap2_hg19.txt'
	output:
		'/mnt/work/pol/ROH/annotation/burden_gene_{sample}.txt'
	run:
		g= pd.read_csv(input[0], sep= '\t', header= 0)
		d= pd.read_csv(input[1], sep= '\t', header= None, names= ['ID', 'n', 'freq', 'beta', 'se', 'pvalue', 'loglik'])
		d[['chr', 'gene', 'EntrezID']]= d.ID.str.split(':', expand= True)
		d= pd.merge(d, g[['gene', 'start', 'end']], on= 'gene')
		df= pd.read_csv(input[2], sep= '\t', header= 0)
                df['chr']= pd.to_numeric(df.chr.str.replace('chr', ''), errors= 'coerce')
                df.dropna(subset= ['chr'], inplace= True)
                df= df[['cyto', 'Mim', 'GeneSymbol', 'EntrezID', 'Phenotype', 'Comments']]
                df.dropna(subset= ['Phenotype'], inplace= True)
                rec= df[df.Phenotype.str.contains('recessive', na= False)]
                d= pd.merge(d, rec, left_on= 'gene', right_on= 'GeneSymbol', how= 'left')
		d.to_csv(output[0], index= False, header= True, sep= '\t')

rule format_gene_map_cds:
        'Format gene map from UCSC cds.'
        input:
                '/mnt/work/pol/refdata/UCSC_gene_cds.txt',
                '/mnt/work/pol/refdata/Pseudogenes_UCSC.txt'
        output:
                '/mnt/work/pol/ROH/annotation/UCSC_gene_cds.txt'
        run:
                d= pd.read_csv(input[0], sep= '\t', header= 0)
                x= pd.read_csv(input[1], sep= '\t', header= 0)
                d= d.loc[~d.geneSymbol.isin(x.name2), :]
                d['chrom']= d.chrom.replace(' ', '', regex= True)
                d['chrom']= d.chrom.replace('chr', '', regex= True)
                d['chrom']= d.chrom.replace('X', '23', regex= True)
                d['chrom']= pd.to_numeric(d.chrom, errors= 'coerce')
                d= d.loc[~d.EntrezID.isnull(), :]
                d= d.loc[d.cdsStart != d.cdsEnd,:]
                d.dropna(subset= ['chrom'], inplace= True)
                x= d.groupby(['chrom', 'geneSymbol', 'EntrezID', 'strand'])['cdsStart'].min().reset_index()
                x1= d.groupby(['chrom', 'geneSymbol', 'EntrezID', 'strand'])['cdsEnd'].max().reset_index()
                df= pd.merge(x, x1, on= ['chrom', 'geneSymbol', 'EntrezID', 'strand'])
                df.columns= ['chr', 'gene', 'EntrezID', 'strand', 'cdsstart', 'cdsend']
                df.to_csv(output[0], sep= '\t', header= True, index= False)

rule cds_map_bp_to_cM:
        ''
        input:
                '/mnt/work/pol/ROH/annotation/UCSC_gene_cds.txt',
                '/mnt/work/pol/ROH/1KG/1000GP_Phase3/genetic_map_combined_b37.txt',
                '/mnt/work/pol/ROH/1KG/1000GP_Phase3/chrX/genetic_map_chrX_nonPAR_combined_b37.txt'
        output:
                '/mnt/work/pol/ROH/annotation/cM_gene_cds.txt'
        run:
                d= pd.read_csv(input[0], delim_whitespace=True, header= 0)
                gm= pd.read_csv(input[1], delim_whitespace=True, header= 0, names= ['chr', 'pos', 'rate', 'cM'])
                gx= pd.read_csv(input[2], delim_whitespace=True, header= 0, names= ['pos', 'rate', 'cM'])
                gx['chr']= 23
                gm= pd.concat([gm,gx])
                df_list= list()
                for CHR in set(d.chr):
                        temp_d= d.loc[d.chr== CHR, :]
                        temp_gm= gm.loc[gm.chr== CHR, :]
                        temp_d['cdcM1']= np.interp(temp_d.cdsstart, temp_gm['pos'], temp_gm['cM'])
                        temp_d['cdcM2']= np.interp(temp_d.cdsend, temp_gm['pos'], temp_gm['cM'])
                        df_list.append(temp_d)
                x= pd.concat(df_list)
                x.to_csv(output[0], sep= '\t', header= True, index= False)

