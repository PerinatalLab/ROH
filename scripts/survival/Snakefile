import pandas as pd
import numpy as np
import os
import gzip
from functools import reduce
import scipy.stats as st
import statsmodels.stats.multitest as multi
from sklearn.decomposition import PCA

cohort_nms= ['harvestm12', 'harvestm24','rotterdam1', 'rotterdam2', 'normentfeb', 'normentmay']
smpl_nms= ['maternal','paternal', 'fetal']
batch_nms= ['m12', 'm24']
CHR_nms= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22]

# Other arguments:

pruning_nms= ['none', 'soft', 'moderate', 'hard']

dens_nms= [5]
SNP_nms= [15, 25, 50, 75, 100, 150, 200, 350, 500]
length_nms= [0.0000001]
het_nms= [0, 1]
GAP_nms= [5]

dens_bp= [5000]
SNP_bp= [15, 25, 50, 75, 100, 150, 200, 350, 500]
length_bp= [0.0000001]
het_bp= [0, 1]
GAP_bp= [5000]

# Functions

def isfloat(str):
    try:
        float(str)
        return True
    except ValueError:
        return False


rule surv_analysis:
        'Linear regression analysis analyis on bined ROH calls.'
        input:
                '/mnt/work/pol/ROH/{cohort}/genotypes/maps/{sample}/segments_maps_{sample}_chr{CHR}.txt.gz',
                '/mnt/work/pol/ROH/{cohort}/pheno/runs_mfr_{sample}.txt'
        output:
                temp('/mnt/work/pol/ROH/{cohort}/results/maps_surv/{sample}/surv_spont_{sample}_chr{CHR}')
        script:
                'surv_segments.R'

rule concat_surv:
	'Concat surv results from multiple chromosomes.'
	input:
		expand('/mnt/work/pol/ROH/{{cohort}}/results/maps_surv/{{sample}}/surv_spont_{{sample}}_chr{CHR}', CHR= CHR_nms)
	output:
		temp('/mnt/work/pol/ROH/{cohort}/results/maps_surv/{sample}/surv_spont_{sample}')
	shell:
		'cat {input} > {output[0]}'

rule split_segments:
        'Split overlapping segments between sub-cohorts for surv results.'
        input:
                '/mnt/work/pol/ROH/{cohort}/results/maps_surv/{sample}/surv_spont_{sample}',
                expand('/mnt/work/pol/ROH/{cohort}/results/maps_surv/{{sample}}/surv_spont_{{sample}}', cohort= cohort_nms)
        output:
                temp('/mnt/work/pol/ROH/{cohort}/results/surv_spont_{sample}_temp')
        script:
                'overlap_split_segment.py'

rule surv_cM_to_bp:
	'Convert cM to bp in surv results.'
	input:
#                '/mnt/work/pol/ROH/{cohort}/results/surv_spont_{sample}_temp',
		'/mnt/work/pol/ROH/{cohort}/results/maps_surv/{sample}/surv_spont_{sample}',
		expand('/mnt/work/pol/ROH/{cohort}/runs/{{sample}}_input_ROH_geno.txt', cohort= cohort_nms),
		expand('/mnt/work/pol/ROH/{cohort}/genotypes/{pruning}/pruned{cohort}_{{sample}}.bim', cohort= cohort_nms, pruning= pruning_nms)
	output:
		'/mnt/work/pol/ROH/{cohort}/results/autoz_surv_spont_{sample}'
	run:
		d= pd.read_csv(input[0], header= 0, sep= '\t')
		flist= [infile for infile in input if 'geno.txt' in infile]
		bim_list= list()
		for infile in flist:
			x= [line.strip() for line in open("".join(infile), 'r')]
			bim= [i for i in x if 'bim' in i]
			bim= pd.read_csv("".join(bim), delim_whitespace= True, header= None, names= ['chr', 'id', 'pos', 'cM', 'A1', 'A2'])
			bim_list.append(bim)
		bim= pd.concat(bim_list)
		bim.drop_duplicates(subset= ['chr', 'pos'], keep= 'first', inplace= True)
		bim.drop_duplicates(subset= ['chr', 'cM'], keep= 'first', inplace= True)
		bim= bim[['chr', 'pos', 'cM']]
		d= pd.merge(d, bim, left_on= ['chr', 'cM1'], right_on= ['chr', 'cM'])
		d.rename(columns= {'pos': 'pos1'}, inplace= True)
		d= pd.merge(d, bim, left_on= ['chr', 'cM2'], right_on= ['chr', 'cM'])
		d.rename(columns= {'pos': 'pos2'}, inplace= True)
		d.drop(['cM_x', 'cM_y'], axis= 1, inplace= True)
		d.to_csv(output[0], sep= '\t', header= True, index= False)

rule concat_segmental_surv_autozygous_chrX:
	''
	input:
		'/mnt/work/pol/ROH/{cohort}/results/autoz_surv_spont_{sample}',
		'/mnt/work/pol/ROH/{cohort}/results/chrX/chrX_surv_spont'
	output:
		'/mnt/work/pol/ROH/{cohort}/results/surv_spont_{sample}'
	run:
		infiles= input[0]
		if wildcards.sample== 'maternal': shell('cat {input} > {output[0]}')
		if wildcards.sample!= 'maternal': shell('cat {infiles} > {output[0]}')

rule surv_imputed:
        'Cox regression for imputed variants within HC segments.'
        input:
                '/mnt/work/pol/ROH/{cohort}/genotypes/GT/{sample}_HC_temp',
                '/mnt/work/pol/ROH/{cohort}/pheno/runs_mfr_{sample}.txt',
                '/mnt/work/pol/ROH/{cohort}/genotypes/{sample}_ids_toextract'
        output:
                '/mnt/work/pol/ROH/{cohort}/results/imputed/nofilter_surv_spont_{sample}'
	threads: 4
        script:
                'surv_imputed.R'

rule filter_variants:
	'Select variants with INFO score> 0.4 in all cohorts.'
	input:
		expand('/mnt/work/pol/ROH/{cohort}/results/imputed/nofilter_surv_spont_maternal', cohort= cohort_nms),
		expand('/mnt/work/pol/{cohort}/info/INFO.txt.gz', cohort= cohort_nms)
	output:
		temp('/mnt/work/pol/ROH/results/variants_info_score.txt')
	run:
		d_list= list()
		input_files= [infile for infile in input if 'INFO' in infile]
		for infile in input_files:
			df= pd.read_csv(infile, header= None, sep= '\t', names= ['chr', 'pos', 'REF', 'EFF', 'AC', 'AN', 'INFO'])
			df= df.loc[df.INFO> 0.4, ['chr', 'pos', 'REF', 'EFF']]
			df["REF"], df["EFF"] = np.where(df['REF'] > df['EFF'], [df["EFF"], df["REF"]], [df["REF"], df["EFF"]])
			d_list.append(df)
		d= reduce(lambda df1, df2: pd.merge(df1, df2, on=['chr', 'pos', 'REF', 'EFF']), d_list)
		d.to_csv(output[0], sep= ':', header= False, index= False)

rule filter_surv:
	'Select top genetic variants associated with spontaneous delivery risk (filter INFO score >0.6)'
	input:
		'/mnt/work/pol/ROH/{cohort}/results/imputed/nofilter_surv_spont_{sample}',
		'/mnt/work/pol/ROH/results/variants_info_score.txt'
	output:
		'/mnt/work/pol/ROH/{cohort}/results/imputed/filtered_surv_spont_{sample}'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= None, names= ['variant', 'ref', 'eff', 'n', 'beta', 'sd', 'pvalue', 'correlation', 'corr_pvalue'])
		with open(input[1]) as f:
			variants_filter= f.read().splitlines()
		d= d.loc[d.variant.isin(variants_filter), :]
		d.to_csv(output[0], sep= '\t', header= False, index= False)

rule concat_imputed_surv_chrX:
	''
	input:
		'/mnt/work/pol/ROH/{cohort}/results/chrX/imputed/chrX_imputed_surv_spont',
		'/mnt/work/pol/ROH/{cohort}/results/imputed/filtered_surv_spont_{sample}'
	output:
		'/mnt/work/pol/ROH/{cohort}/results/imputed/imputed_surv_spont_{sample}'
	run:
		if wildcards.sample== 'maternal': shell('cat {input} > {output[0]}')
		if wildcards.sample!= 'maternal': shell('mv {input[1]} {output[0]}')

