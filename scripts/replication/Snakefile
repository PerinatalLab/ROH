import pandas as pd
import numpy as np
import os
import gzip
from functools import reduce
import scipy.stats as st
import statsmodels.stats.multitest as multi

sample_rep_nms= ['maternal']
CHR_nms= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22]
rep_nms= ['normentjan', 'normentjun']

# Other arguments:

#pruning_nms= ['none', 'soft', 'moderate', 'hard']
pruning_nms= ['moderate']
dens_nms= [5]
SNP_nms= [15, 25, 50, 75, 100, 150, 200, 300, 400]
length_nms= [0.0000001]
het_nms= [0, 1]
GAP_nms= [5]

dens_bp= [5000]
SNP_bp= [15, 25, 50, 75, 100, 150, 200, 300, 400]
length_bp= [0.0000001]
het_bp= [0, 1]
GAP_bp= [5000]

# Functions

rule ids_rep:
	'List maternal, paternal and fetal ids acceptable by PLINK for --keep.'
	input:
		'/mnt/work/pol/{rep}/pheno/{rep}_linkage.csv'
	output:
		'/mnt/work/pol/ROH/replication/{rep}/pheno/rep_{sample_rep}_ids'
	run:
		d= pd.read_csv(input[0], delim_whitespace= True, header= 0)
		d.dropna(subset= ['Role'], inplace= True)
		x= d.pivot(index= 'PREG_ID_315', columns= 'Role', values= ['FID', 'SentrixID']).reset_index()
		FID= np.where(~x.FID.Mother.isnull(), x.FID.Mother, x.FID.Father)
		x= pd.concat([x.PREG_ID_315, x.SentrixID, pd.DataFrame({'FID': FID})], axis= 1)
		x['PREG_ID_315']= x['PREG_ID_315'].astype(int)
		x= x[pd.to_numeric(x['FID'], errors='coerce').notnull()]
		x['FID']= x['FID'].astype(int)
		x.dropna(subset= ['FID'], inplace= True)
		if 'Child' in x.columns:
			x_c= x.dropna(subset= ['Child'])
		x_m= x.dropna(subset= ['Mother'])
		x_f= x.dropna(subset= ['Father'])
		if wildcards.sample_rep == 'maternal': x_m.to_csv(output[0], header= None, columns= ['FID', 'Mother'], index= False, sep= '\t')
		if wildcards.sample_rep == 'fetal': x_c.to_csv(output[0], header= None, columns= ['FID', 'Child'], index= False, sep= '\t')
		if wildcards.sample_rep == 'paternal': x_f.to_csv(output[0], header= None, columns= ['FID', 'Father'], index= False, sep= '\t')


rule exclude_non_biallelic_rep:
        'Set range file for multi-allelic SNPs.'
        input:
                '/mnt/archive/NORMENT1/delivery-fhi/data/genotyped/jan15/genotyped.bim',
                '/mnt/archive/NORMENT1/delivery-fhi/data/genotyped/jun15/genotyped.bim'
        output:
                temp('/mnt/work/pol/ROH/replication/{rep}/multiallelic.txt')
        run:
                d= pd.read_csv(input[0], sep= '\t', header= None, names= ['chr', 'SNP', 'X', 'pos', 'A1', 'A2'])
                d= d[d[['chr', 'pos']].duplicated(keep=False)]
                d= d[['chr', 'pos', 'pos', 'X']]
                d.to_csv(output[0], sep= '\t', header= False, index= False)

rule split_bed_rep:
        'Modify the bed file: keep only CHR23, exclude maf <=0.05 and keep only mothers.'
        input:
                '/mnt/work/pol/ROH/replication/{rep}/pheno/rep_{sample_rep}_ids',
                '/mnt/work/pol/ROH/replication/{rep}/multiallelic.txt',
                expand('/mnt/archive/NORMENT1/delivery-fhi/data/genotyped/jan15/genotyped.{ext}', ext= ['bed','bim','fam']),
                expand('/mnt/archive/NORMENT1/delivery-fhi/data/genotyped/jun15/genotyped.{ext}', ext= ['bed','bim','fam']),
        output:
                temp(expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/temp/{{rep}}_genotyped_{{sample_rep}}.{ext}', ext= ['bed', 'bim', 'fam', 'log']))
        params:
                '/mnt/archive/NORMENT1/delivery-fhi/data/genotyped/jan15/genotyped',
                '/mnt/archive/NORMENT1/delivery-fhi/data/genotyped/jun15/genotyped',
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/temp/{rep}_genotyped_{sample_rep}'
        run:
                if wildcards.rep== 'normentjan': geno= params[0]
                if wildcards.rep== 'normentjun': geno= params[1]
                shell('~/soft/plink --bfile {geno} --exclude range {input[1]} --maf 0.05 --keep {input[0]} --make-bed --chr 1-22 --make-founders --out {params[2]}')

rule multi_pruning_rep:
        'Filter PLINK file according to different pruning parameters.'
        input:
                expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/temp/{{rep}}_genotyped_{{sample_rep}}.{ext}', ext= ['bed', 'bim', 'fam', 'log'])
        output:
                temp(expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/soft/{{rep}}_{{sample_rep}}.{ext}', ext= ['prune.out','prune.in', 'log'])),
                temp(expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/moderate/{{rep}}_{{sample_rep}}.{ext}', ext= ['prune.out','prune.in', 'log'])),
                temp(expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/hard/{{rep}}_{{sample_rep}}.{ext}', ext= ['prune.out','prune.in', 'log']))
        params:
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/temp/{rep}_genotyped_{sample_rep}',
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/soft/{rep}_{sample_rep}',
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/moderate/{rep}_{sample_rep}',
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/hard/{rep}_{sample_rep}'
        shell:
                """
                ~/soft/plink --bfile {params[0]} --indep-pairwise 50 5 0.9 --out {params[1]}
                ~/soft/plink --bfile {params[0]} --indep-pairwise 50 5 0.5 --out {params[2]}
                ~/soft/plink --bfile {params[0]} --indep-pairwise 50 5 0.1 --out {params[3]}
                """

rule move_none_pruning_rep:
        'Move PLINK files not pruned to wildcard.pruning == none folder.'
        input:
                expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/temp/{{rep}}_genotyped_{{sample_rep}}.{ext}', ext= ['bed','bim','fam'])
        output:
                expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/none/{{rep}}_{{sample_rep}}.{ext}', ext= ['bed','bim','fam'])
        params:
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/none/'
        shell:
                """
                mkdir -p {params[0]}
                cp {input[0]} {output[0]}
                cp {input[1]} {output[1]}
                cp {input[2]} {output[2]}
                """
rule plink_bfile_prune_rep:
        'Exclude genetic variants in prune.out files (obtained with rule plink_split_bed).'
        input:
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/hard/{rep}_{sample_rep}.prune.out',
		'/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/soft/{rep}_{sample_rep}.prune.out',
		'/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/moderate/{rep}_{sample_rep}.prune.out',
		expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/temp/{{rep}}_genotyped_{{sample_rep}}.{ext}', ext= ['bed', 'bim', 'fam'])
        output:
                expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/hard/{{rep}}_{{sample_rep}}.{ext}', ext= ['bed', 'bim', 'fam', 'log']),
                expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/soft/{{rep}}_{{sample_rep}}.{ext}', ext= ['bed', 'bim', 'fam', 'log']),
                expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/moderate/{{rep}}_{{sample_rep}}.{ext}', ext= ['bed', 'bim', 'fam', 'log'])
        params:
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/temp/{rep}_genotyped_{sample_rep}',
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/hard/{rep}_{sample_rep}',
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/soft/{rep}_{sample_rep}',
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/moderate/{rep}_{sample_rep}'
        shell:
                '''
                ~/soft/plink --bfile {params[0]} --exclude {input[0]} --make-bed --out {params[1]}
                ~/soft/plink --bfile {params[0]} --exclude {input[1]} --make-bed --out {params[2]}
                ~/soft/plink --bfile {params[0]} --exclude {input[2]} --make-bed --out {params[3]}
                '''

rule replace_bp_cm_rep:
        'PLINK cannot use cM to estimate ROH length, so we replace bp position to cM in the .bim file.'
        input:
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/{pruning}/pruned{rep}_{sample_rep}.bim',
                '/mnt/work/pol/ROH/1KG/1000GP_Phase3/genetic_map_combined_b37.txt'
        output:
                '/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/{pruning}/cm_pruned{rep}_{sample_rep}.bim'
        run:
                d= pd.read_csv(input[0], sep= '\t', header= None)
                d.columns= ['chr', 'SNP', 'X', 'pos', 'A1', 'A2']
                g= pd.read_csv(input[1], delim_whitespace= True, header= 0, names= ['chr', 'pos', 'rate', 'cM'])
                g= g[['chr', 'cM', 'pos']]
#                g.columns= ['chr', 'Genetic_Map(cM)', 'pos']
                df= pd.merge(d, g, on= ['chr', 'pos'], how= 'left')
                df_miss= df.loc[df['cM'].isna(), :]
                newdf= pd.DataFrame()
                for CHR in set(df_miss.chr):
                        df_temp= df_miss.loc[df_miss.chr== CHR, :]
                        g_temp= g.loc[g.chr== CHR, :]
                        df_temp['newX']= np.interp(df_temp['pos'], g_temp['pos'], g_temp['cM'])
                        newdf= newdf.append(df_temp)
                newdf= newdf[['chr','pos', 'newX']]
                df= pd.merge(df, newdf, on= ['chr', 'pos'], how= 'left')
                df['X']= np.where(df['cM'].isna(), df['newX'], df['cM'])
                df['X']= (df.X*10**4).round() * 100
                df['X']= df['X'] + df.groupby(['chr', 'X']).cumcount()
                df[['pos', 'X']]= df[['X','pos']]
                df= df[['chr', 'SNP', 'X', 'pos', 'A1', 'A2']]
                df.sort_values(['chr', 'pos'], ascending= True, inplace= True)
                df.to_csv(output[0], sep= '\t', header= False, index= False)


rule estimate_ROH_rep:
	'''
	Obtain ROH estimates using PLINK 1.9.
	Configuration according to file "/mnt/work/pol/ROH/arguments/max_R2.txt"
	'''
	input:
		expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/{pruning}/pruned{{rep}}_{{sample_rep}}.{ext}', pruning= pruning_nms, ext= ['bed', 'fam']),
		expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/{pruning}/cm_pruned{{rep}}_{{sample_rep}}.bim', pruning= pruning_nms)
	output:
		'/mnt/work/pol/ROH/replication/{rep}/runs/tmp_{rep}_{sample_rep}.hom.indiv',
		'/mnt/work/pol/ROH/replication/{rep}/runs/tmp_{rep}_{sample_rep}.hom',
		'/mnt/work/pol/ROH/replication/{rep}/runs/{sample_rep}_input_ROH_geno.txt',
		temp(expand('/mnt/work/pol/ROH/replication/tmp_{{rep}}/runs/{{rep}}_{{sample_rep}}.{ext}', ext= ['log', 'hom.summary']))
	params:
		'/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{sample_rep}'
	run:
		prun= 'soft'
		bed= [bed for bed in input if prun in bed and 'bed' in bed]
		fam= [fam for fam in input if prun in fam and 'fam' in fam]
		bim= [bim for bim in input if prun in bim and 'bim' in bim and 'cm' in bim]
		GAP= round(5 * 1000)
		SNPwm= round(125 * 0.05)
		dens= round(5 * 1000)
		shell("/home/pol.sole.navais/soft/plink --bed {bed} --bim {bim} --fam {fam} --homozyg-window-snp 125 --homozyg-snp 125 --homozyg-kb 0.0000001 --homozyg-gap {GAP} --homozyg-window-missing {SNPwm} --homozyg-window-threshold 0.0005 --homozyg-window-het 0 --homozyg-density {dens} --out {params}")
		l= list(["".join(bed), "".join(bim), "".join(fam)])
		with open(output[2], 'w') as f:
			f.writelines( "%s\n" % item for item in l)

rule gap_ROH_rep:
        ''
        input:
                '/mnt/work/pol/ROH/replication/{rep}/runs/tmp_{rep}_{sample_rep}.hom',
                '/mnt/work/pol/ROH/1KG/cm_UCSC_gap.txt',
                '/mnt/work/pol/ROH/replication/{rep}/runs/tmp_{rep}_{sample_rep}.hom.indiv'
        output:
                '/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{sample_rep}.hom',
                '/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{sample_rep}.hom.indiv'
        run:
                df= pd.read_csv(input[1], header= 0, sep= '\t')
                df_list= list()
                for d in pd.read_csv(input[0], header= 0, delim_whitespace= True, chunksize= 10**5, iterator= True):
                        for chrom in set(d.CHR):
                                temp_d= d.loc[d.CHR== chrom, :]
                                temp_df= df.loc[df.chr==chrom, :]
                                temp_d= pd.merge(temp_d, temp_df, left_on= 'CHR', right_on= 'chr')
                                temp_d= temp_d.loc[(temp_d.POS1 > temp_d.cM2 * 10**8) | (temp_d.POS2< temp_d.cM1 * 10**6), :]
                                temp_d.drop_duplicates(subset= ['IID', 'CHR', 'POS1', 'POS2'], inplace=True, keep= 'first')
                                temp_d= temp_d[['IID', 'CHR', 'POS1', 'POS2', 'KB']]
                                df_list.append(temp_d)
                d= pd.concat(df_list)
                d.to_csv(output[0], index= False, header= True, sep= '\t')
                df= d.groupby('IID')['KB'].agg(['mean', 'sum', 'count']).reset_index()
                df.columns= ['IID', 'KBAVG', 'KB', 'NSEG']
                x= pd.read_csv(input[2], header= 0, delim_whitespace= True, usecols= ['IID'])
                df= pd.merge(df, x, on= 'IID', how= 'outer')
                df.fillna(0, inplace= True)
                df.to_csv(output[1], sep= '\t', header= True, index=False)

rule list_sUPD_ROH_rep:
        ''
        input:
                '/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{sample_rep}.hom',
		'/mnt/work/pol/ROH/replication/{rep}/runs/{sample_rep}_input_ROH_geno.txt',
                expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/{pruning}/cm_pruned{{rep}}_{{sample_rep}}.bim', pruning= pruning_nms)
        output:
                '/mnt/work/pol/ROH/replication/{rep}/runs/sUPD_{rep}_{sample_rep}.txt'
        run:
                prun= 'soft'
                bim= [bim for bim in input if prun in bim and 'bim' in bim and 'cm' in bim]
                d_cm= pd.read_csv(input[0], delim_whitespace= True, header= 0)
                d_cm= d_cm.groupby(['IID', 'CHR'])['KB'].agg('sum').reset_index()
                CHROM= pd.read_csv("".join(bim), delim_whitespace= True, header= 0, names= ['CHR', 'snp', 'X', 'cm', 'A1', 'A2'], usecols= ['CHR', 'cm'])
                CHROM['cmd']= CHROM.groupby('CHR')['cm'].diff(1)
                CHROM= CHROM.groupby('CHR')['cmd'].agg('sum').reset_index()
                d_cm= pd.merge(d_cm, CHROM, on= ['CHR'])
                d_cm= d_cm.loc[((d_cm.KB / 1000) / d_cm.cmd) > 0.70, :]
                d_cm.to_csv(output[0], sep= '\t', header= False, index= False, columns= ['IID'])


rule phenofile_rep:
	'Merge all data necessary to create a phenotype file with ROH.'
	input:
		'/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{sample_rep}.hom',
		'/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{sample_rep}.hom.indiv',
		'/mnt/work/pol/{rep}/pheno/{rep}_mfr.csv',
		'/mnt/work/pol/{rep}/pheno/{rep}_linkage.csv',
		'/mnt/work/pol/ROH/replication/{rep}/runs/{sample_rep}_input_ROH_geno.txt',
		'/mnt/work/pol/{rep}/pheno/flag_list.txt',
		'/mnt/work/pol/{rep}/pca/pca_exclude.txt',
		'/mnt/work/pol/ROH/replication/{rep}/runs/sUPD_{rep}_{sample_rep}.txt',
		expand('/mnt/work/pol/ROH/replication/{{rep}}/genotypes_rep/{pruning}/pruned{{rep}}_{{sample_rep}}.bim', pruning= pruning_nms)
	output:
		'/mnt/work/pol/ROH/replication/{rep}/pheno/runs_mfr_{sample_rep}.txt'
	script:
		'pheno_replication.py'

rule concat_phenos_PCA_rep:
        'Concat pheno files, and add PCA.'
        input:
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/pca/mobagen-total/mobagen-total-proj-pc',
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/pedigree/mobagen-ethnic-core-samples.kin0',
                expand('/mnt/work/pol/ROH/replication/{rep}/pheno/runs_mfr_{{sample_rep}}.txt', rep= rep_nms)
        output:
                '/mnt/work/pol/ROH/replication/pheno/runs_mfr_{sample_rep}.txt'
        run:
                def selectUnrelated(df, x):
                        kin= pd.read_csv(input[1], header= 0, sep= '\t')
                        kin= kin.loc[kin.Kinship > 0.0884, :]
                        kin= kin.loc[kin.ID1.isin(x.values)]
                        kin= kin.loc[kin.ID2.isin(x.values)]
                        kin= kin.loc[:, ['ID1','ID2','Kinship']]
                        kin_temp= kin.copy()
                        kin_temp.columns= ['ID2', 'ID1', 'Kinship']
                        kin_temp= kin_temp.append(kin)
                        kin_temp['n']= kin_temp.groupby('ID1')['ID1'].transform('count')
                        kin_temp['nn']= kin_temp.groupby('ID2')['ID2'].transform('count')
                        kin_temp.sort_values(by=['n', 'nn'], inplace= True)
                        to_keep= list()
                        for i in range(0, len(kin_temp.index)):
                                if kin_temp.iloc[i, 0] in kin_temp.iloc[0:i, 1].values:
                                        kin_temp.iloc[i, 1]= "X"
                                else:
                                        to_keep.append(kin_temp.iloc[i, 0])
                        to_remove= [i for i in kin_temp.ID1 if i not in to_keep]
                        to_remove= list(set(to_remove))
                        remove= pd.DataFrame({'FID': to_remove})
                        remove['IID']= remove.FID
                        return remove
                df_list= list()
                flist= [infile for infile in input if 'pheno' in infile]
                for infile in flist:
                        x= pd.read_csv(infile, sep= '\t', header= 0)
                        df_list.append(x)
                d= pd.concat(df_list)
                pca= pd.read_csv(input[0], header= 0, sep= '\t')
                remove= selectUnrelated(d, d.IID)
                d= d[~d.IID.isin(remove)]
                d= pd.merge(d, pca, how= 'left', on= 'IID')
                d.to_csv(output[0], sep= '\t', header= True, index= False)

rule mapping_ROH_segments2_rep:
	'Obtain matrix (rows= segment, columns = subject), with all minimum segmental ROHs per subject (1= homozygous part of ROH).'
	input:
		expand('/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{{sample_rep}}.hom', rep= rep_nms),
		expand('/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{{sample_rep}}.hom.indiv', rep= rep_nms),
		expand('/mnt/work/pol/ROH/{cohort}/runs/{cohort}_{{sample_rep}}.hom', cohort= cohort_nms)
	output:
		'/mnt/work/pol/ROH/replication/genotypes/maps/{sample_rep}/segments_maps_{sample_rep}_chr{CHR}.txt.gz'
	script:
		'../segments_snv_maps/segment_map_ROH.py'

rule surv_analysis_rep:
	'AFT analysis analyis on bined ROH calls.'
	input:
		'/mnt/work/pol/ROH/replication/genotypes/maps/{sample_rep}/segments_maps_{sample_rep}_chr{CHR}.txt.gz',
		'/mnt/work/pol/ROH/replication/pheno/runs_mfr_{sample_rep}.txt'
	output:
		temp('/mnt/work/pol/ROH/replication/results/{sample_rep}/surv_spont_{sample_rep}_chr{CHR}'),
		'/mnt/work/pol/ROH/replication/results/{sample_rep}/eff_ROH_{CHR}.txt'
	script:
		'../survival/surv_segments.R'


rule concat_surv_rep:
	'Concat surv results from multiple chromosomes.'
	input:
		expand('/mnt/work/pol/ROH/replication/results/{{sample_rep}}/surv_spont_{{sample_rep}}_chr{CHR}', CHR= CHR_nms)
	output:
		temp('/mnt/work/pol/ROH/replication/results/{sample_rep}/surv_spont_{sample_rep}')
	shell:
		'cat {input} > {output[0]}'

rule surv_cM_to_bp_rep:
        'Convert cM to bp in surv results.'
        input:
                '/mnt/work/pol/ROH/replication/results/{sample_rep}/surv_spont_{sample_rep}',
                expand('/mnt/work/pol/ROH/replication/{rep}/runs/{{sample_rep}}_input_ROH_geno.txt', rep= rep_nms),
		expand('/mnt/work/pol/ROH/replication/{rep}/genotypes_rep/{pruning}/{rep}_{{sample_rep}}.bim', rep= rep_nms, pruning= pruning_nms)
        output:
                '/mnt/work/pol/ROH/replication/results/autoz_surv_spont_{sample_rep}'
        run:
                d= pd.read_csv(input[0], header= None, sep= '\t', names= ['segment', 'n', 'freq', 'beta', 'sd', 'pvalue', 'loglik'])
                d[['chr', 'cM1', 'cM2']]= d['segment'].str.split(':', expand= True)
                d[['chr', 'cM1', 'cM2']]= d[['chr', 'cM1', 'cM2']].apply(lambda x: x.astype('float'))
                flist= [infile for infile in input if 'geno.txt' in infile]
                bim_list= list()
                for infile in flist:
                        x= [line.strip() for line in open("".join(infile), 'r')]
                        bim= [i for i in x if 'bim' in i]
                        bim= pd.read_csv("".join(bim), delim_whitespace= True, header= None, names= ['chr', 'id', 'pos', 'cM', 'A1', 'A2'])
                        bim_list.append(bim)
                bim= pd.concat(bim_list)
                bim.drop_duplicates(subset= ['chr', 'pos'], keep= 'first', inplace= True)
                bim.drop_duplicates(subset= ['chr', 'cM'], keep= 'first', inplace= True)
                bim= bim[['chr', 'pos', 'cM']]

                d= pd.merge(d, bim, left_on= ['chr', 'cM1'], right_on= ['chr', 'cM'])
                d.rename(columns= {'pos': 'pos1'}, inplace= True)
                d= pd.merge(d, bim, left_on= ['chr', 'cM2'], right_on= ['chr', 'cM'])
                d.rename(columns= {'pos': 'pos2'}, inplace= True)
                d.drop(['cM_x', 'cM_y'], axis= 1, inplace= True)
                d.to_csv(output[0], sep= '\t', header= True, index= False)

rule GMM_rep:
        ''
        input:
                '/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{sample_rep}.hom'
        output:
                '/mnt/work/pol/ROH/replication/{rep}/runs/classBC_{rep}_{sample_rep}.hom',
                '/mnt/work/pol/ROH/replication/{rep}/runs/classBC_{rep}_{sample_rep}_sizes.txt'
        script:
                '../segments_snv_maps/GMM_ROH.R'

rule map_ROH_genes_rep:
	'Map ROH segments to genes.'
	input:
		'/mnt/work/pol/ROH/annotation/UCSC_gene_genetic_distance.txt',
		expand('/mnt/work/pol/ROH/replication/{rep}/runs/classBC_{rep}_{{sample_rep}}.hom', rep= rep_nms),
		expand('/mnt/work/pol/ROH/replication/{rep}/runs/{rep}_{{sample_rep}}.hom.indiv', rep= rep_nms)
	output:
		temp('/mnt/work/pol/ROH/replication/genotypes/maps/gene/{sample_rep}_genemap_{CHR}.txt')
	script:
		'../segments_snv_maps/gene_maps_ROH.py'

rule gene_burden_rep:
	''
	input:
		'/mnt/work/pol/ROH/replication/genotypes/maps/gene/{sample_rep}_genemap_{CHR}.txt',
		'/mnt/work/pol/ROH/replication/pheno/runs_mfr_{sample_rep}.txt'
	output:
		temp('/mnt/work/pol/ROH/replication/results/burden_survival_{sample_rep}_{CHR}.txt'),
		temp('/mnt/work/pol/ROH/replication/results/eff_burden_survival_{sample_rep}_{CHR}.txt')
	script:
		'../survival/aft_genes.R'


rule concat_gene_rep:
	''
	input:
		expand('/mnt/work/pol/ROH/replication/results/burden_survival_{{sample_rep}}_{CHR}.txt', CHR= CHR_nms)
	output:
		'/mnt/work/pol/ROH/replication/results/burden_survival_{sample_rep}.txt'
	shell:
		'cat {input} > {output[0]}'


rule concat_eff_gene_rep:
	''
	input:
		expand('/mnt/work/pol/ROH/replication/results/eff_burden_survival_{{sample_rep}}_{CHR}.txt', CHR= CHR_nms)
	output:
		'/mnt/work/pol/ROH/results/replication/results/{sample_rep}/gene_burden_eff.txt'
	shell:
		'cat {input} > {output[0]}'


rule extract_sample_reps_rep:
	'Samples for filtering VCF files.'
	input:
		'/mnt/work/pol/ROH/replication/pheno/runs_mfr_{sample_rep}.txt',
		'/mnt/work/pol/ROH/genotypes/imputed/vcf_ids'
	output:
		temp('/mnt/work/pol/ROH/replication/genotypes_rep/imputed/{sample_rep}_ids_toextract')
	run:
		x= [line.strip() for line in open(input[1], 'r')]
                d= pd.read_csv(input[0], sep= '\t', header= 0)
                d= d.loc[d['IID'].isin(x)]
                d.drop_duplicates(subset= ['IID'], inplace= True)
                d.to_csv(output[0], header= False, columns= ['IID'], index= False, sep= '\t')

rule extract_GT_rep:
	'Extract genotype for HC segments.'
	input:
		'/mnt/work/pol/ROH/results/misc/HC_toextract_{sample_rep}',
		'/mnt/work/pol/ROH/replication/genotypes_rep/imputed/{sample_rep}_ids_toextract',
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/vcf/{CHR}.vcf.gz'
	output:
		temp('/mnt/work/pol/ROH/replication/genotypes_rep/GT/gt{CHR}_HC_{sample_rep}')
	run:
		if os.stat(input[0]).st_size > 0: shell("~/soft/bcftools-1.9/bin/bcftools query -S {input[1]} -R {input[0]} -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' {input[2]} -o {output[0]}")
		if os.stat(input[0]).st_size == 0: open(output[0], 'a').close()

rule concat_GT_rep:
        'Concat GT form all chromosomes.'
        input:
                expand('/mnt/work/pol/ROH/replication/genotypes_rep/GT/gt{CHR}_HC_{{sample_rep}}', CHR= CHR_nms)
        output:
                temp('/mnt/work/pol/ROH/replication/genotypes_rep/GT/{sample_rep}_HC_temp')
        shell:
                'cat {input} > {output[0]}'

rule surv_imputed_rep:
	'Cox regression for imputed variants within HC segments.'
	input:
		'/mnt/work/pol/ROH/replication/genotypes_rep/GT/{sample_rep}_HC_temp',
		'/mnt/work/pol/ROH/replication/pheno/runs_mfr_{sample_rep}.txt',
		'/mnt/work/pol/ROH/replication/genotypes_rep/imputed/{sample_rep}_ids_toextract'
	output:
		temp('/mnt/work/pol/ROH/replication/results/tmp_imputed_surv_spont_{sample_rep}')
	script:
		'../survival/surv_imputed.R'

rule concat_surv_imputed_rep:
	''
	input:
		'/mnt/work/pol/ROH/replication/results/tmp_imputed_surv_spont_{sample_rep}',
		'/mnt/work/pol/ROH/replication/results/tmp_imputed_surv_spont_{sample_rep}_chrX'
	output:
		'/mnt/work/pol/ROH/replication/results/imputed_surv_spont_{sample_rep}'
	shell:
		'cat {input} > {output[0]}'
